// Copyright 2014-2017 M. Rizky Luthfianto.
// Revisions Copyright 2020 Tianyi Shi.
// Licensed under the MIT license (http://opensource.org/licenses/MIT)
// This file may not be copied, modified, or distributed
// except according to those terms.

//! The BLOSUM62 substitution matrix
//!
//! Cluster Percentage: >= 30
//! Entropy = 0.9868, Expected = -0.7442

use crate::scores::lookup;

const MAT: [i32; 729] = [
    7, -3, -1, -3, -2, -4, 0, -3, -3, -3, -1, -3, -2, -3, -1, -1, -2, -3, 2, 0, -1, -1, -5, -1, -4,
    -2, -8, -3, 6, -6, 6, 1, -6, -2, -1, -6, -7, -1, -7, -5, 5, -3, -4, -1, -2, 0, -1, -3, -6, -8,
    -3, -5, 0, -8, -1, -6, 13, -7, -7, -4, -6, -7, -2, -3, -6, -3, -3, -5, -4, -6, -5, -6, -2, -2,
    -4, -2, -5, -4, -5, -7, -8, -3, 6, -7, 10, 2, -6, -3, -2, -7, -7, -2, -7, -6, 2, -3, -3, -1,
    -3, -1, -2, -3, -6, -8, -3, -6, 1, -8, -2, 1, -7, 2, 8, -6, -4, 0, -6, -6, 1, -6, -4, -1, -2,
    -2, 3, -1, -1, -2, -2, -4, -6, -2, -5, 6, -8, -4, -6, -4, -6, -6, 10, -6, -2, -1, -1, -5, 0, 0,
    -6, -3, -6, -5, -5, -4, -4, -3, -2, 0, -3, 4, -6, -8, 0, -2, -6, -3, -4, -6, 9, -4, -7, -7, -3,
    -7, -5, -1, -3, -5, -4, -4, -1, -3, -3, -6, -6, -3, -6, -4, -8, -3, -1, -7, -2, 0, -2, -4, 12,
    -6, -6, -1, -5, -4, 1, -2, -4, 1, 0, -2, -3, -2, -5, -4, -2, 3, 0, -8, -3, -6, -2, -7, -6, -1,
    -7, -6, 7, 5, -5, 2, 2, -6, -2, -5, -5, -5, -4, -2, -2, 4, -5, -2, -3, -6, -8, -3, -7, -3, -7,
    -6, -1, -7, -6, 5, 5, -5, 4, 3, -6, -2, -5, -5, -5, -4, -3, -2, 3, -5, -2, -3, -6, -8, -1, -1,
    -6, -2, 1, -5, -3, -1, -5, -5, 8, -4, -3, 0, -2, -2, 2, 3, -1, -1, -2, -4, -6, -2, -4, 1, -8,
    -3, -7, -3, -7, -6, 0, -7, -5, 2, 4, -4, 6, 3, -6, -2, -5, -4, -4, -4, -3, -2, 1, -4, -2, -2,
    -5, -8, -2, -5, -3, -6, -4, 0, -5, -4, 2, 3, -3, 3, 9, -4, -2, -4, -1, -3, -3, -1, -2, 1, -3,
    -2, -3, -3, -8, -3, 5, -5, 2, -1, -6, -1, 1, -6, -6, 0, -6, -4, 9, -2, -4, 0, -1, 1, 0, -2, -5,
    -7, -2, -4, -1, -8, -1, -3, -4, -3, -2, -3, -3, -2, -2, -2, -2, -2, -2, -2, -2, -3, -2, -2, -1,
    -1, -2, -2, -5, -2, -3, -1, -8, -1, -4, -6, -3, -2, -6, -5, -4, -5, -5, -2, -5, -4, -4, -3, 12,
    -3, -3, -2, -3, -3, -4, -7, -3, -6, -2, -8, -2, -1, -5, -1, 3, -5, -4, 1, -5, -5, 2, -4, -1, 0,
    -2, -3, 9, 1, -1, -1, -2, -4, -4, -2, -3, 5, -8, -3, -2, -6, -3, -1, -5, -4, 0, -5, -5, 3, -4,
    -3, -1, -2, -3, 1, 9, -2, -2, -2, -4, -5, -2, -4, 0, -8, 2, 0, -2, -1, -1, -4, -1, -2, -4, -4,
    -1, -4, -3, 1, -1, -2, -1, -2, 7, 2, -1, -3, -6, -1, -3, -1, -8, 0, -1, -2, -2, -2, -4, -3, -3,
    -2, -3, -1, -3, -1, 0, -1, -3, -1, -2, 2, 8, -1, 0, -5, -1, -3, -2, -8, -1, -3, -4, -3, -2, -3,
    -3, -2, -2, -2, -2, -2, -2, -2, -2, -3, -2, -2, -1, -1, -2, -2, -5, -2, -3, -1, -8, -1, -6, -2,
    -6, -4, -2, -6, -5, 4, 3, -4, 1, 1, -5, -2, -4, -4, -4, -3, 0, -2, 7, -5, -2, -3, -4, -8, -5,
    -8, -5, -8, -6, 0, -6, -4, -5, -5, -6, -4, -3, -7, -5, -7, -4, -5, -6, -5, -5, -5, 16, -5, 3,
    -5, -8, -1, -3, -4, -3, -2, -3, -3, -2, -2, -2, -2, -2, -2, -2, -2, -3, -2, -2, -1, -1, -2, -2,
    -5, -2, -3, -1, -8, -4, -5, -5, -6, -5, 4, -6, 3, -3, -3, -4, -2, -3, -4, -3, -6, -3, -4, -3,
    -3, -3, -3, 3, -3, 11, -4, -8, -2, 0, -7, 1, 6, -6, -4, 0, -6, -6, 1, -5, -3, -1, -1, -2, 5, 0,
    -1, -2, -1, -4, -5, -1, -4, 6, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
    -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 1,
];

/// Return the substitution score in blosum80 matrix between two amino acids (single characters as `u8`)
pub fn blosum80(a: u8, b: u8) -> i32 {
    MAT[lookup(a) * 27 + lookup(b)]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_blosum80() {
        let score1 = blosum80(b'A', b'A');
        assert_eq!(score1, 7);
        let score2 = blosum80(b'O', b'*');
        assert_eq!(score2, -8);
        let score3 = blosum80(b'A', b'*');
        assert_eq!(score3, -8);
        let score4 = blosum80(b'*', b'*');
        assert_eq!(score4, 1);
        let score5 = blosum80(b'X', b'X');
        assert_eq!(score5, -2);
        let score6 = blosum80(b'X', b'Z');
        assert_eq!(score6, -1);
    }
}
